{"version":3,"sources":["components/navigation/Navbar.js","pages/LandingBack.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","onClick","window","open","LandingBack","useSpring","xys","config","mass","tension","friction","div","Landing","lazy","Page404","displayRoutes","Home","name","path","App","Helmet","content","routes","Object","values","delayMs","fallback","default","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QA2BeA,G,MAxBA,SAACC,GACf,OACC,4BAAQC,UAAU,cACjB,uBAAGA,UAAU,aAAb,iBACA,yBAAKA,UAAU,mBACd,4BACCA,UAAU,UACVC,QAAS,kBACRC,OAAOC,KACN,wCACA,YALH,kB,cC+BWC,MAnCf,SAAqBL,GACpB,IAD2B,EAYHM,aAAU,iBAAO,CACxCC,IAAK,CAAC,EAAG,EAAG,GACZC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAKC,SAAU,QAdjB,gCAiBGL,aAAU,iBAAO,CAC9CC,IAAK,CAAC,EAAG,EAAG,GACZC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAKC,SAAU,SAnBjB,mBAsB3B,OAtB2B,UAuB1B,kBAAC,IAAEC,IAAH,CAAOX,UAAU,uBClBbY,EAAUC,gBAAK,kBAAM,gCACrBC,EAAUD,gBAAK,kBAAM,gCAKrBE,EAAgB,CACrBC,KAAM,CAAEC,KAAM,OAAQC,KAAM,OAkCdC,MA3Bf,WACC,OACC,yBAAKnB,UAAU,OACd,kBAACoB,EAAA,OAAD,KACC,+CACA,0BACCH,KAAK,cACLI,QAAQ,6DAET,0BAAMJ,KAAK,cAAcI,QAAQ,aAElC,kBAAC,EAAD,CAAQC,OAAQC,OAAOC,OAAOT,KAC9B,0BAAMf,UAAU,iBACf,kBAAC,EAAD,MACA,kBAAC,WAAD,CACCyB,QAAQ,KACRC,SAAU,yEACV,kBAAC,IAAD,CAAQ1B,UAAU,mBACjB,kBAACY,EAAD,CAASM,KAAMH,EAAcC,KAAKE,OAClC,kBAACJ,EAAD,CAASa,SAAO,SC9BFC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4c3f9e27.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Navbar = (props) => {\r\n\treturn (\r\n\t\t<header className='app_header'>\r\n\t\t\t<p className='app_title'>Aditya Mishra</p>\r\n\t\t\t<nav className='links_container'>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='btn_cta'\r\n\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\twindow.open(\r\n\t\t\t\t\t\t\t'https://www.linkedin.com/in/iadityam/',\r\n\t\t\t\t\t\t\t'_blank' // <- This is what makes it open in a new window.\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}>\r\n\t\t\t\t\tLet's Talk\r\n\t\t\t\t</button>\r\n\t\t\t</nav>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nNavbar.propTypes = {\r\n\troutes: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nexport default Navbar;\r\n/* <a\r\n  className=\"app_link\"\r\n  href=\"https://reactjs.org\"\r\n  target=\"_blank\"\r\n  rel=\"noopener noreferrer\"\r\n>\r\n  Hire Me\r\n</a> */\r\n","import React, { Suspense } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport { a, useSpring, useTransition } from 'react-spring';\r\n\r\nfunction LandingBack(props) {\r\n\tconst calc_dp = (x, y) => [\r\n\t\t-(y - window.innerHeight / 2) / 20,\r\n\t\t(x - window.innerWidth / 2) / 20,\r\n\t\t1.15,\r\n\t];\r\n\r\n\t// const trans = (x, y, s) =>\r\n\t// \t`perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\r\n\tconst trans_dp = (x, y, s) =>\r\n\t\t`perspective(50vh) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\r\n\r\n\tconst [aniprops, set] = useSpring(() => ({\r\n\t\txys: [0, 0, 1],\r\n\t\tconfig: { mass: 5, tension: 350, friction: 40 },\r\n\t}));\r\n\r\n\tconst [aniprops_dp, set_dp] = useSpring(() => ({\r\n\t\txys: [0, 0, 1],\r\n\t\tconfig: { mass: 8, tension: 400, friction: 80 },\r\n\t}));\r\n\r\n\treturn (\r\n\t\t<a.div className='app_back_animated'>\r\n\t\t\t{/* <a.h1>I'm an animated Header</a.h1>\r\n\t\t\tI will have all the animations <br />\r\n\t\t\tthat will show up in the background\r\n\t\t\t<br />\r\n\t\t\tof the entire app. */}\r\n\t\t</a.div>\r\n\t);\r\n}\r\n\r\n// LandingBack.propTypes = {};\r\n\r\nexport default LandingBack;\r\n\r\n// // const [on, toggle] = useState(false);\r\n\r\n// // const transition = useTransition(on, null, {\r\n// // \tfrom: { opacity: 0 },\r\n// // \tenter: { opacity: 1 },\r\n// // \tleave: { opacity: 0 },\r\n// // });\r\n\r\n// // const calc = (x, y) => [\r\n// // \t-(y - window.innerHeight / 2) / 20,\r\n// // \t(x - window.innerWidth / 2) / 20,\r\n// // \t1.1,\r\n// // ];\r\n\r\n// const calc_dp = (x, y) => [\r\n// \t-(y - window.innerHeight / 2) / 20,\r\n// \t(x - window.innerWidth / 2) / 20,\r\n// \t1.15,\r\n// ];\r\n\r\n// // const trans = (x, y, s) =>\r\n// // \t`perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\r\n// const trans_dp = (x, y, s) =>\r\n// \t`perspective(50vh) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\r\n\r\n// const [aniprops, set] = useSpring(() => ({\r\n// \txys: [0, 0, 1],\r\n// \tconfig: { mass: 5, tension: 350, friction: 40 },\r\n// }));\r\n\r\n// const [aniprops_dp, set_dp] = useSpring(() => ({\r\n// \txys: [0, 0, 1],\r\n// \tconfig: { mass: 8, tension: 400, friction: 80 },\r\n// }));\r\n\r\n// // const [intro_2_ani, set_intro_2_ani] = useSpring(()=> (\r\n// // \tfrom={\r\n// // \t\t// Start invisible and offscreen\r\n// // \t\topacity: 0, marginTop: -1000,\r\n// // \t},\r\n// // \tto={\r\n// // \t\t// End fully visible and in the middle of the screen\r\n// // \t\topacity: 1, marginTop: 0,\r\n// // \t},\r\n// // ))\r\n\r\n// // console.log(transition);\r\n// // const cardSpring = useSpring({\r\n// // \tbackgroundColor: `#000fff`,\r\n// // });\r\n// //#region sections\r\n// //#region hero section\r\n// const hero_old = (\r\n// \t<section className='land_hero'>\r\n// \t\t<a.div\r\n// \t\t\tclassName='hero_animator'\r\n// \t\t\tinitial={{\r\n// \t\t\t\topacity: 0,\r\n// \t\t\t\ty: -100,\r\n// \t\t\t\tbackground: '#123',\r\n// \t\t\t}}\r\n// \t\t\tanimate={{\r\n// \t\t\t\topacity: 1,\r\n// \t\t\t\ty: 0,\r\n// \t\t\t\tbackground: '#010203',\r\n// \t\t\t\ttransition: {\r\n// \t\t\t\t\tduration: 2,\r\n// \t\t\t\t\twhen: 'beforeChildren',\r\n// \t\t\t\t\tstaggerChildren: 1,\r\n// \t\t\t\t},\r\n// \t\t\t}}\r\n// \t\t\ttransition={{\r\n// \t\t\t\tease: 'easeInOut',\r\n// \t\t\t\tduration: 2,\r\n// \t\t\t}}>\r\n// \t\t\t<img\r\n// \t\t\t\tsrc='https://media.giphy.com/media/i4jKn7itdV2Tvjzj6Y/giphy.gif'\r\n// \t\t\t\talt='looping background placeholder gif'\r\n// \t\t\t\twidth='100%'\r\n// \t\t\t\theight='100%'\r\n// \t\t\t\tclassName='giphy-embed'\r\n// \t\t\t/>\r\n// \t\t\t{/* <motion.div\r\n// \t\t\t\tstyle={{\r\n// \t\t\t\t\twidth: '120px',\r\n// \t\t\t\t\theight: '120px',\r\n// \t\t\t\t\tbackgroundColor: '#448AFF',\r\n// \t\t\t\t\tmarginTop: '8vh',\r\n// \t\t\t\t}}\r\n// \t\t\t\tanimate={{\r\n// \t\t\t\t\tscale: [1, 2, 2, 1, 1],\r\n// \t\t\t\t\trotate: [0, 0, 270, 270, 0],\r\n// \t\t\t\t\tborderRadius: ['20%', '20%', '50%', '40%', '20%'],\r\n// \t\t\t\t}}\r\n// \t\t\t\twhileHover={{\r\n// \t\t\t\t\tscale: 1.1,\r\n// \t\t\t\t\tbackgroundColor: '#304FFE',\r\n// \t\t\t\t\t// background: 'linear-gradient(to right, #304FFE, #448AFF)',\r\n// \t\t\t\t}}\r\n// \t\t\t\twhileTap={{\r\n// \t\t\t\t\tscale: 0.9,\r\n// \t\t\t\t}}\r\n// \t\t\t/>\r\n// \t\t\t<a.div\r\n// \t\t\t\tonMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\r\n// \t\t\t\tonMouseLeave={() => set({ xys: [0, 0, 1] })}\r\n// \t\t\t\tstyle={{\r\n// \t\t\t\t\twidth: '160px',\r\n// \t\t\t\t\theight: '160px',\r\n// \t\t\t\t\tbackgroundColor: '#fff176',\r\n// \t\t\t\t\tmarginTop: '8vh',\r\n// \t\t\t\t\tborderRadius: '50%',\r\n// \t\t\t\t\tpadding: '1rem',\r\n// \t\t\t\t\ttransform: aniprops.xys.interpolate(trans),\r\n// \t\t\t\t}}>\r\n// \t\t\t\t<img style={{ height: '100%' }} src={genericLogo} alt='test pic' />\r\n// \t\t\t</a.div> */}\r\n// \t\t</a.div>\r\n// \t\t<motion.h1\r\n// \t\t\tclassName='hero_intro_lhs'\r\n// \t\t\tinitial={{\r\n// \t\t\t\topacity: 0,\r\n// \t\t\t\tx: 100,\r\n// \t\t\t}}\r\n// \t\t\tanimate={{\r\n// \t\t\t\topacity: 1,\r\n// \t\t\t\tx: 0,\r\n// \t\t\t}}\r\n// \t\t\ttransition={{ ease: 'easeOut', duration: 2 }}>\r\n// \t\t\t{pro.land_greeting}\r\n// \t\t\t<br />I am <span className='hero_name_high'>{pro.g_name}</span>\r\n// \t\t\t{/* Hi there! <br />I am Aditya. */}\r\n// \t\t</motion.h1>\r\n// \t\t<a.img\r\n// \t\t\tsrc={`https://avatars2.githubusercontent.com/u/13042657?s=460&v=4`}\r\n// \t\t\talt='dp of iadityam'\r\n// \t\t\theight='100%'\r\n// \t\t\twidth='auto'\r\n// \t\t\tclassName='hero_intro_rhs_container'\r\n// \t\t\tonMouseMove={({ clientX: x, clientY: y }) =>\r\n// \t\t\t\tset_dp({ xys: calc_dp(x, y) })\r\n// \t\t\t}\r\n// \t\t\tonMouseLeave={() => set_dp({ xys: [0, 0, 1] })}\r\n// \t\t\tstyle={{ transform: aniprops_dp.xys.interpolate(trans_dp) }}\r\n// \t\t/>\r\n// \t\t{/* <a.div\r\n// \t\t\tclassName='hero_intro_rhs_container'\r\n// \t\t\tonMouseMove={({ clientX: x, clientY: y }) =>\r\n// \t\t\t\tset_dp({ xys: calc_dp(x, y) })\r\n// \t\t\t}\r\n// \t\t\tonMouseLeave={() => set_dp({ xys: [0, 0, 1] })}\r\n// \t\t\tstyle={{ transform: aniprops_dp.xys.interpolate(trans_dp) }}>\r\n// \t\t\t<img\r\n// \t\t\t\tsrc={`https://avatars2.githubusercontent.com/u/13042657?s=460&v=4`}\r\n// \t\t\t\talt='dp of iadityam'\r\n// \t\t\t\theight='100%'\r\n// \t\t\t\twidth='auto'\r\n// \t\t\t\tclassName='hero_img'\r\n// \t\t\t/>\r\n// \t\t</a.div> */}\r\n// \t\t<a.h2\r\n// \t\t\tclassName='hero_intro_rhs'\r\n// \t\t\t// onMouseMove={{ opacity: 1 }}\r\n// \t\t\t// onMouseLeave={{ opacity: 0.75 }}\r\n// \t\t>\r\n// \t\t\t{`I'm an entrepreneur and I want to make your life easier - with technology.`}\r\n// \t\t</a.h2>\r\n// \t\t{/* <div className='hero_intro_lhs_container'>\r\n// \t\t\t<div className='hero_intro_lhs_style'> </div>\r\n// \t\t</div> */}\r\n// \t</section>\r\n// );\r\n// //#endregion\r\n","import React, { lazy, Suspense } from 'react';\nimport { Router } from '@reach/router';\nimport { Helmet } from 'react-helmet';\n\nimport './styles/App.css';\nimport Navbar from './components/navigation/Navbar';\nimport LandingBack from './pages/LandingBack';\n\n//#region Lazy imports\nconst Landing = lazy(() => import('./pages/Landing'));\nconst Page404 = lazy(() => import('./pages/DefaultPage'));\n\n//#endregion\n\n//#region App routes\nconst displayRoutes = {\n\tHome: { name: 'Home', path: '*/' },\n\t// Dash: { name: 'Dashboard', path: '/dash/', requiresAuth: true },\n\t// Jobs: { name: 'Jobs', path: '/jobs' },\n\t// Apply: { name: 'Apply', path: '/apply-now' },\n};\n//#endregion\n\nfunction App() {\n\treturn (\n\t\t<div className='app'>\n\t\t\t<Helmet>\n\t\t\t\t<title>Adi says Hi!</title>\n\t\t\t\t<meta\n\t\t\t\t\tname='description'\n\t\t\t\t\tcontent='Portfolio of Aditya Mishra. A tech-head and entrepreneur'\n\t\t\t\t/>\n\t\t\t\t<meta name='theme-color' content='#008f68' />\n\t\t\t</Helmet>\n\t\t\t<Navbar routes={Object.values(displayRoutes)} />\n\t\t\t<main className='app_container'>\n\t\t\t\t<LandingBack />\n\t\t\t\t<Suspense\n\t\t\t\t\tdelayMs='50'\n\t\t\t\t\tfallback={<div>... Loading All Kinds of Cool Stuff... </div>}>\n\t\t\t\t\t<Router className='pages_container'>\n\t\t\t\t\t\t<Landing path={displayRoutes.Home.path} />\n\t\t\t\t\t\t<Page404 default />\n\t\t\t\t\t</Router>\n\t\t\t\t</Suspense>\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n/* <Dashboard path={displayRoutes.Dash.path} />\n<Login path={systemRoutes.Login.path} />\n<Counselling path={systemRoutes.Counselling.path} />\n<Learn path={systemRoutes.Learn.path} />\n<ProfilerStudent path={systemRoutes.ProfilerStudent.path} />\n<ProfileStudent path={systemRoutes.ProfileStudent.path} />\n<ProfilerCompany path={systemRoutes.ProfilerCompany.path} />\n<ProfileCompany path={systemRoutes.ProfileCompany.path} />\n<Learn path='/works' />\n<Learn path='/learn' />\n<Build path={routes.Build.path} />\n<Build path='/build' />\n<Dashboard path='/me/*' />\n<Dashboard path='/user/*' />\n<Tdc path='/tdc' />\n<Toolkit path='/toolkit/*' width={windWidth} isMobile={isMobile} />\n<Feedback path='/feedback/*' />\n<Studio path={routes.Studio.path} />\n<GenericForm path='collab/:id/:id' /> */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}